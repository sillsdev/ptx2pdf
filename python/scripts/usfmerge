#!/usr/bin/python3

import sys, os, logging,argparse
try:
    from ptxprint.usfmerge import usfmerge2
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    from ptxprint.usfmerge import usfmerge2

parser = argparse.ArgumentParser()
stdkeylist="LRABCDEFGHIJKMN"
parser.add_argument("infile", help="Input USFM file(s)",nargs='+',default=[])
parser.add_argument("-k","--keys", help=F"Input file IDs, e.g -k LRA for 3 input files to be used as columns L, R and A. If not supplied it will default to however much of the standard list ({stdkeylist}) is required. Users wanting more than { len(stdkeylist) } columns must provide their own lists.",default=None)
parser.add_argument("-o","--outfile",help="output file")
parser.add_argument("-a","--astylesheet",default=[],action="append",help="add another stylesheet for infilea")
parser.add_argument("-b","--bstylesheet",default=[],action="append",help="add another stylesheet for infileb")
parser.add_argument("-c","--colstylesheet",default=[],nargs=2,action="append",help="A filename : add (another) stylesheet for infile A")
parser.add_argument("-p","--protect",default=[],action="append",nargs=2,help="mkr score : decrease the score for breakpoints at  \\mkr  by score. Useful to give \\nb extra protection.")
parser.add_argument("-s","--stylesheet",default=[],action="append",help="add another stylesheet for both files")
parser.add_argument("-S","--scores",help="Uneven scoring. A break is forced when the score of break-points is 100 or more. e.g. -S \"70,30,15,15\" will force a break in the 3rd and 4th input files if the first two agree, or in the 2nd if all other files agree.")
parser.add_argument("-m","--mode",default="scores",help="alignment algorithm: simple, doc, *scores")
parser.add_argument("-y","--synchronise",default="normal",help="synchronise on: chapter, verses, *normal. Single value OR comma-separated list, one per column.")
parser.add_argument("--fsecondary",action="store_true",help="Use fig elements from secondary not primary source")
parser.add_argument("--debug",action="store_true",help="Print out debug statements")
args = parser.parse_args()

if args.keys is None:
    if len(args.infile)> len(stdkeylist):
        raise ValueError("Too many files for implicit list. Supply -k argument")
    keyarr=list(stdkeylist[0:len(args.infile)])
else:
    keyarr=list(args.keys)

print(keyarr)
sheetsa = args.stylesheet + args.astylesheet
sheetsb = args.stylesheet + args.bstylesheet
stylesheets = {}
for k,sheetfile in args.colstylesheet:
    if k in stylesheets:
        stylesheets[k].append(sheetfile)
    else:
        stylesheets[k] = args.stylesheet
        stylesheets[k].append(sheetfile)

for k in keyarr:
  if k not in stylesheets:
    stylesheets[k] = args.stylesheet

print(f"{stylesheets=}")

protect={}
for k,v in args.protect:
    protect[k] = int(v)

scorearr={}
if args.scores:
    scorearr = args.scores.split(",")
if args.debug:
      parms = {'level': 5, 'datefmt': '%d/%b/%Y %H:%M:%S', 'format': '%(asctime)s.%(msecs)03d %(levelname)s:%(module)s(%(lineno)d) %(message)s'}
      # parms = {'level': 7, 'datefmt': '%d/%b/%Y %H:%M:%S', 'format': '%(levelname)s:%(message)s |%(module)s(%(lineno)d)'}
      logging.basicConfig(**parms)
logging.debug(f"{stylesheets=}")
usfmerge2(args.infile, keyarr, args.outfile, stylesheets=stylesheets, scorearr=scorearr,
           fsecondary=args.fsecondary, mode=args.mode, synchronise=args.synchronise, debug=args.debug, protect=protect)
