#!/usr/bin/python3

import argparse
from ptxprint.unicode.ucd import find_ucd

class Or:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def get(self):
        a = self.a.get()
        b = self.b.get()
        return a | b

class And:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def get(self):
        a = self.a.get()
        b = self.b.get()
        return a & b

class T:
    def __init__(self, group, vals, chars=[]):
        self.group = group
        self.vals = vals
        self.chars = chars

    def __or__(self, o):
        return Or(self, o)

    def __and__(self, o):
        return And(self, o)

    def get(self):
        tmp = set(self.chars)
        for val in self.vals:
            tmp.update(find_ucd(self.group, val))
        return tmp


parser = argparse.ArgumentParser()
parser.add_argument("outfile",nargs="?",default="ptx-unicode.tex",help="Output TeX file")
args = parser.parse_args()

classes = {
    "Vir":      [T("InSC", ["Invisible_Stacker", "Virama", "Joiner", "Non_Joiner"])],
    "CM":       [T("gc", ["Mc", "Mn"]) | T("InSC", ["Top"])],
    "Num":      [T("bc", ["ES", "EN", "ET", "AN", "CS", "BN"])],
    "ArabL":    [T("jt", ["L"])],
    "ArabR":    [T("jt", ["R"])],
    "ArabD":    [T("jt", ["D", "C"])],
    "ArabU":    [T("jt", ["U"]) & (T("bc", ["AL"]) | T("sc", ["Mong"]))],
    "Ignore":   [T("gc", [], chars=[0xFDD0])]
}

pairs = [   (0, 0), ("CM", 0), ("Num", 0), (0, "Num"), ("CM", "Num"), ("CM", "ArabL"),
            ("ArabD", "ArabL"), ("ArabL", "ArabL"), ("ArabR", "ArabL"), ("ArabR", "ArabD"),
            ("ArabR", "ArabR"), ("CM", "ArabU"), ("ArabU", "ArabL"), ("ArabU", "ArabR"),
            ("ArabU", "ArabD"), ("ArabU", "ArabU"), ("Num", "ArabL"), ("Num", "ArabR"),
            ("Num", "ArabD"), ("Num", "ArabU") ]

extras = {
    0x0E33: 'CM'
}

classdat = {}
for k, b in classes.items():
    dat = set()
    for v in b:
        dat.update(v.get())
    if "Vir" in classdat:
        dat -= classdat["Vir"]
    classdat[k] = dat

for k, v in extras.items():
    classdat[v].add(k)

used = {}
duplicates = {}
with open(args.outfile, "w", encoding="utf-8") as outf:
    outf.write("""% Generated by mkptxunicode. Do not hand edit
\\def\\intercharignore#1{}
\\XeTeXinterchartokenstate=1
""")
    for k in classes.keys():
        outf.write("\\newXeTeXintercharclass\\Kclass{}\n".format(k))
    for k, v in classdat.items():
        outf.write("\n")
        for c in sorted(v):
            if 0x20 <= c < 0xE0000:
                if c in used:
                    duplicates[c] = duplicates.get(c, ["*"+used[c]]) + [k]
                else:
                    outf.write('\\XeTeXcharclass"{:04X}=\\Kclass{}\n'.format(c, k))
                    used[c] = k
    outf.write("\n% Interclass rules\n")
    for p in pairs:
        kp = ("\\Kclass"+x if x != 0 else "0" for x in p)
        outf.write("\\XeTeXinterchartoks {} {}{{\\intercharspace}}\n".format(*kp))
    outf.write("\\XeTeXinterchartoks 0 \\KclassIgnore{\\intercharignore}\n")
    for a in ("CM", "Num"):
        outf.write("\\XeTeXinterchartoks \\Kclass{} \\KclassIgnore{{\\intercharignore}}\n".format(a))
    outf.write("\\XeTeXinterchartokenstate=0\n")

if len(duplicates):
    print("Duplicates: " + ", ".join("{:04X}: {}".format(c, " ".join(v)) for c,v in sorted(duplicates.items())))
